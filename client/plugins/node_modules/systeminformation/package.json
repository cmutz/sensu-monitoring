{
  "_args": [
    [
      {
        "raw": "systeminformation@git+https://github.com/Buzut/systeminformation.git",
        "scope": null,
        "escapedName": "systeminformation",
        "name": "systeminformation",
        "rawSpec": "git+https://github.com/Buzut/systeminformation.git",
        "spec": "git+https://github.com/Buzut/systeminformation.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:Buzut/systeminformation.git",
          "sshUrl": "git+ssh://git@github.com/Buzut/systeminformation.git",
          "httpsUrl": "git+https://github.com/Buzut/systeminformation.git",
          "gitUrl": "git://github.com/Buzut/systeminformation.git",
          "shortcut": "github:Buzut/systeminformation",
          "directUrl": "https://raw.githubusercontent.com/Buzut/systeminformation/master/package.json"
        }
      },
      "/tmp/sensu-monitoring/client/plugins/node_modules/sensu-server-metrics"
    ]
  ],
  "_from": "git+https://github.com/Buzut/systeminformation.git",
  "_id": "systeminformation@2.0.6",
  "_inCache": true,
  "_location": "/systeminformation",
  "_phantomChildren": {},
  "_requested": {
    "raw": "systeminformation@git+https://github.com/Buzut/systeminformation.git",
    "scope": null,
    "escapedName": "systeminformation",
    "name": "systeminformation",
    "rawSpec": "git+https://github.com/Buzut/systeminformation.git",
    "spec": "git+https://github.com/Buzut/systeminformation.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:Buzut/systeminformation.git",
      "sshUrl": "git+ssh://git@github.com/Buzut/systeminformation.git",
      "httpsUrl": "git+https://github.com/Buzut/systeminformation.git",
      "gitUrl": "git://github.com/Buzut/systeminformation.git",
      "shortcut": "github:Buzut/systeminformation",
      "directUrl": "https://raw.githubusercontent.com/Buzut/systeminformation/master/package.json"
    }
  },
  "_requiredBy": [
    "/sensu-server-metrics"
  ],
  "_resolved": "git+https://github.com/Buzut/systeminformation.git#b87c3f37195c67150f6042fc439f7380661b17d0",
  "_shasum": "91b07018029245d003740c5a30d56386b9280f8b",
  "_shrinkwrap": null,
  "_spec": "systeminformation@git+https://github.com/Buzut/systeminformation.git",
  "_where": "/tmp/sensu-monitoring/client/plugins/node_modules/sensu-server-metrics",
  "author": {
    "name": "Sebastian Hildebrandt",
    "email": "hildebrandt@plus-innovations.com",
    "url": "https://plus-innovations.com"
  },
  "bugs": {
    "url": "https://github.com/sebhildebrandt/systeminformation/issues"
  },
  "dependencies": {},
  "description": "Simple system and OS information library",
  "devDependencies": {},
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "b87c3f37195c67150f6042fc439f7380661b17d0",
  "homepage": "https://github.com/sebhildebrandt/systeminformation",
  "keywords": [
    "system information",
    "sysinfo",
    "monitor",
    "monitoring",
    "os",
    "linux",
    "osx",
    "cpu",
    "memory",
    "file system",
    "network",
    "processes",
    "users",
    "internet"
  ],
  "license": "MIT",
  "main": "./lib/index.js",
  "name": "systeminformation",
  "optionalDependencies": {},
  "os": [
    "darwin",
    "linux"
  ],
  "readme": "# systeminformation\n\nSimple system and OS information library for [node.js][nodejs-url]\n\n  [![NPM Version][npm-image]][npm-url]\n  [![NPM Downloads][downloads-image]][downloads-url]\n  [![MIT license][license-img]][license-url]\n\n## Quick Start\n\n### Installation\n\n```bash\n$ npm install systeminformation --save\n```\n\n### Usage\n\nAll functions (except `version` and `time`) are implemented as asynchronous functions. Here a small example how to use them:\n\n```\nvar si = require('systeminformation');\n\nsi.cpu(function(data) {\n\tconsole.log('CPU-Information:');\n\tconsole.log(data);\n})\n```\n\n### Major Changes - Version 2\n\nThere are a lot of changes in version 2 of systeminformation! Here is a quick overview:\n\nNew Functions  \n\n- `version`: returns systeminformation version (semver)\n- `system`: hardware info (manufacturer, product/model name, version, serial, uuid)\n- `networkConnections`: number of active connections\n- `inetLatency`: latency in ms to external resource (internet)\n- `getStaticData`: returns on json object with static data at once (OS, CPU, Network Interfaces - they should not change until restarted)\n- `getDynamicData`: returns on json object with all dynamic data at once (e.g. for monitoring agents)\n- `getAllData`: returns on json object with all data (static and dynamic) at once\n\nRenamed Functions (now all camelCase)\n\n- `osinfo`: renamed to `osInfo`\n- `cpu_currentspeed`: renamed to `cpuCurrentspeed`\n- `cpu_temperature`: renamed to `cpuTemperature`\n- `fs_size`: renamed to `fsSize`\n- `fs_speed`: renamed to `fsStats`\n- `network_interfaces`: renamed to `networkInterfaces`\n- `network_speed`: renamed to `networkStats`\n- `network_connections`: renamed to `networkConnections`\n- `currentload`: renamed to `currentLoad`\n- `fullload`: renamed to `fullLoad`\n- `processload`: renamed to `processLoad`\n- `checksite`: renamed to `inetChecksite`\n\nFunction Changes\n\n- `cpu_temperature`/`cpuTemperature`: -1 is new default (and indicates that non sensors are installed)\n- `cpu_temperature`/`cpuTemperature`: new result `max` which returns max temperature of all cores\n- `cpu_currentspeed`/`cpuCurrentspeed`: now in GHz\n- `cpu`: splitted `manufacturer` (e.g. Intel) and `brand` (e.g. Core 2 Duo)\n- `network_speed`/`networkStats`: now better support for OS X (also support for `operstate`)\n- `network_speed`/`networkStats`: overall received and transferred bytes (rx, tx)\n- `mem`: now better support for OS X (also support for `swaptotal`, `swapused`, `swapfree`)\n- `fs_size`/`fsSize`: use-values now in % (0 - 100% instead of 0 - 1)  \n- `fs_speed`/`fsStats`: now also full support for OS X\n- `checksite`/`inetChecksite`: new result structure - see command reference\n- `checksite`/`inetChecksite`: ms (former `response_ms`): -1 if not ok\n\nOther changes\n\n- no more external dependencies: `request` is not longer needed\n- where possible results are now integer or float values (instead of strings) because it is easier to calculate with numbers ;-)\n\n**Be aware**, that the new version 2.x is **NOT backward compatible** to version 1.x ....\n\n## Core concept\n\n[Node.js][nodejs-url] comes with some basic OS information, but I always wanted a little more. So I came up to write this\nlittle library. This library is still work in progress. In version 2 I cleaned up a lot of inconsistencies and bugs, but\nthere is for sure room for improvement. I was only able to test it on several Debian, Raspbian, Ubuntu distributions as well\nas OS X (Mavericks, Yosemite, El Captain). Version 2 now also supports nearly all functionality on OS X/Darwin platforms.\nBut be careful, this library will definitely NOT work on Windows platforms!\n\nIf you have comments, suggestions & reports, please feel free to contact me!\n\n## Reference\n\n### Sections\n\nThis library is splitted in several sections:\n\n1. General\n2. System (HW)\n3. Operating System\n4. CPU\n5. Memory\n6. File System\n7. Network\n8. Processes\n9. Users\n10. Internet\n11. GetAll\n\n### Function Reference and OS Support\n\n| function        | Linux           | OS X  | Comments |\n| -------------- | ------ | ------ | ------- |\n| si.version() | X | X | systeminformation version (no callback!) |\n| si.time() | X | X | time information (no callback!) |\n| - current | X | X | local time |\n| - uptime | X | X | uptime |\n| si.system(cb) | X | X | hardware information |\n| - manufacturer | X | X | e.g. 'MSI' |\n| - model | X | X | model/product e.g. 'MS-7823' |\n| - version | X | X | version e.g. '1.0' |\n| - serial | X | X | serial number |\n| - uuid | X | X | UUID |\n| si.osInfo(cb) | X | X | OS information |\n| - platform   | X | X | 'Linux' or 'Darwin' |\n| - distro | X | X |  |\n| - release | X | X |  |\n| - codename | | X |  |\n| - kernel | X | X | kernel release - same as os.release() |\n| - arch | X | X | same as os.arch() |\n| - hostname | X | X | same as os.hostname() |\n| - logofile | X | X | e.g. 'apple', 'debian', 'fedora', ... |\n| si.cpu(cb) | X | X | CPU information|\n| - manufacturer | X | X | e.g. 'Intel(R)' |\n| - brand | X | X | e.g. 'Core(TM)2 Duo' |\n| - speed | X | X | in GHz e.g. '3.40' |\n| - cores | X | X | # cores |\n| si.cpuCurrentspeed(cb) | X | X | current speed (in GHz)|\n| si.cpuTemperature(cb) | X | | CPU temperature (if sensors is installed) |\n| - main | X | | main temperature |\n| - cores | X | | array of temperatures |\n| - max | X | | max temperature |\n| si.mem(cb) | X | X | Memory information|\n| - total | X | X |  |\n| - free | X | X |  |\n| - used | X | X |  |\n| - active | X | X |  |\n| - buffcache | X | X |  |\n| - swaptotal | X | X |  |\n| - swapused | X | X |  |\n| - swapfree | X | X |  |\n| si.fsSize(cb) | X | X | returns array of mounted file systems |\n| - [0].fs | X | X | name of file system |\n| - [0].size | X | X | sizes in Bytes |\n| - [0].used | X | X | used in Bytes |\n| - [0].use | X | X | used in % |\n| - [0].mount | X | X | mount point |\n| si.fsStats(cb) | X | X | current transfer stats |\n| - rx | X | X | bytes read since startup |\n| - wx | X | X | bytes written since startup |\n| - rx_sec | X | X | bytes read / second |\n| - wx_sec | X | X | bytes written / second |\n| - rIOPS | X |  | read IOPS on all mounted drives |\n| - wIOPS | X |  | write IOPS on all mounted drives |\n| - totalIOPS | X |  | global IOPS on all mounted drives |\n| si.networkInterfaces(cb) | X | X | array of network interfaces |\n| - [0].iface | X | X | interface name |\n| - [0].ip4 | X | X | ip4 address |\n| - [0].ip6 | X | X | ip6 address |\n| si.networkStats('eth1',cb) | X | X | current network stats of given interface |\n| - iface | X | X | interface |\n| - operstate | X | X | up / down |\n| - rx | X | X | received bytes overall |\n| - tx | X | X | transferred bytes overall|\n| - rx_sec | X | X | received bytes / second (* see notes) |\n| - tx_sec | X | X | transferred bytes per second (* see notes) |\n| si.currentLoad(cb) | X | X | CPU-Load in % |\n| si.fullLoad(cb) | X | X | CPU-full load since bootup in % |\n| si.services('mysql, apache2', cb) | X | X | pass comma separated string of services |\n| - [0].name | X | X | name of service |\n| - [0].running | X | X | true / false |\n| - [0].pcpu | X | X | process % CPU |\n| - [0].pmem | X | X | process % MEM |\n| si.processes(cb) | X | X | # running processes |\n| si.processLoad('apache2',cb) | X | X | detailed information about given process |\n| - proc | X | X | process name |\n| - pid | X | X | PID |\n| - cpu | X | X | process % CPU |\n| - mem | X | X | process % MEM |\n| si.users(cb) | X | X | array of users online |\n| si.inetChecksite(url, cb) | X | X | response-time (ms) to fetch given URL |\n| - url | X | X | given url |\n| - ok | X | X | status code OK (2xx, 3xx) |\n| - status | X | X | status code |\n| - ms | X | X | response time in ms |\n| si.inetLatency(cb) | X | X | response-time (ms) to external ressource |\n| si.getStaticData(cb)  | X | X | all static data at once |\n| si.getDynamicData(cb,srv,iface) | X | X | all dynamic data at once |\n| si.getAllData(cb,srv,iface) | X | X | all data at once |\n\n### cb: Asynchronous Function Calls (callback)\n\nRemember: all functions (except `version` and `time`) are implemented as asynchronous (callback) functions!\nSo another example, how to use a specific function might be:\n\n```\nvar si = require('systeminformation');\n\nsi.networkStats('eth1', function(data) {\n\tconsole.log('Network Interface Stats (eth1):');\n\tconsole.log('- is up: ' + data.operstate);\n\tconsole.log('- RX bytes overall: ' + data.rx);\n\tconsole.log('- TX bytes overall: ' + data.tx);\n\tconsole.log('- RX bytes/sec: ' + data.rx_sec);\n\tconsole.log('- TX bytes/sec: ' + data.tx_sec);\n})\n```\n\n## Known Issues\n\nThere is one major things, that I was still not able to solve:\n\nFor OS X, I did not find a reliable way to get the CPU temperature. All suggestions I found did not work on current version of OS X on different machines (intel platform). So if anyone has an idea, this would be helpful.\n\nI am happy to discuss any comments and suggestions. Please feel free to contact me if you see any possibility of improvement!\n\n## Version history\n\n| Version        | Date           | Comment  |\n| -------------- | -------------- | -------- |\n| 2.0.5          | 2016-03-02     | changed .gitignore |\n| 2.0.4          | 2016-02-22     | tiny correction - removed double quotes CPU brand, ... |\n| 2.0.3          | 2016-02-22     | optimized cpuCurrentspeed |\n| 2.0.2          | 2016-02-22     | added CoreOS identification |\n| 2.0.1          | 2016-01-07     | minor patch |\n| 2.0.0          | 2016-01-07     | new major version 2.0 |\n| 1.0.7          | 2015-11-27     | fixed: si.network_speed() |\n| 1.0.6          | 2015-09-17     | fixed: si.users() |\n| 1.0.5          | 2015-09-14     | updated dependencies |\n| 1.0.4          | 2015-07-18     | updated docs |\n| 1.0.3          | 2015-07-18     | bugfix cpu cores |\n| 1.0.2          | 2015-07-18     | bugfix cpu_currentspeed, cpu_temperature |\n| 1.0.1          | 2015-07-18     | documentation update |\n| 1.0.0          | 2015-07-18     | bug-fixes, version bump, published as npm component |\n| 0.0.3          | 2014-04-14     | bug-fix (cpu_speed) |\n| 0.0.2          | 2014-03-14     | Optimization FS-Speed & CPU current speed |\n| 0.0.1          | 2014-03-13     | initial release |\n\n## Comments\n\nIf you have ideas or comments, please do not hesitate to contact me.\n\n\nHappy monitoring!\n\nSincerely,\n\nSebastian Hildebrandt, [+innovations](http://www.plus-innovations.com)\n\n## Credits\n\nWritten by Sebastian Hildebrandt [sebhildebrandt](https://github.com/sebhildebrandt)\n\n#### Contributers\n\n- Guillaume Legrain [glegrain](https://github.com/glegrain)\n- Riccardo Novaglia [richy24](https://github.com/richy24)\n\n## Copyright Information\n\nLinux is a registered trademark of Linus Torvalds, OS X is a registered trademark of Apple Inc.,\nWindows is a registered trademark of Microsoft Corporation. Node.js is a trademark of Joyent Inc.,\nIntel is a trademark of Intel Corporation, Raspberry Pi is a trademark of the Raspberry Pi Foundation,\nDebian is a trademark of the Debian Project, Ubuntu is a trademark of Canonical Ltd.\nAll other trademarks are the property of their respective owners.\n\n## License [![MIT license][license-img]][license-url]\n\n>The [`MIT`][license-url] License (MIT)\n>\n>Copyright &copy; 2014-2016 Sebastian Hildebrandt, [+innovations](http://www.plus-innovations.com).\n>\n>Permission is hereby granted, free of charge, to any person obtaining a copy\n>of this software and associated documentation files (the \"Software\"), to deal\n>in the Software without restriction, including without limitation the rights\n>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n>copies of the Software, and to permit persons to whom the Software is\n>furnished to do so, subject to the following conditions:\n>\n>The above copyright notice and this permission notice shall be included in\n>all copies or substantial portions of the Software.\n>\n>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n>THE SOFTWARE.\n>\n>Further details see [LICENSE](LICENSE) file.\n\n\n[npm-image]: https://img.shields.io/npm/v/systeminformation.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/systeminformation\n[downloads-image]: https://img.shields.io/npm/dm/systeminformation.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/systeminformation\n\n[license-url]: https://github.com/sebhildebrandt/systeminformation/blob/master/LICENSE\n[license-img]: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square\n[npmjs-license]: https://img.shields.io/npm/l/systeminformation.svg?style=flat-square\n\n[nodejs-url]: https://nodejs.org/en/\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sebhildebrandt/systeminformation.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.0.6"
}
